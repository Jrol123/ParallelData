namespace _testAsync
{
    class Program
    {
        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–µ–ª–µ–≥–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        public delegate Task<int> TakesAWhileDelegate(int data, int ms, IProgress<string>? progress);

        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞
        static async Task<int> TakesAWhileAsync(int data, int ms, IProgress<string>? progress)
        {
            progress?.Report("üèÅ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞");

            // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            for (int i = 0; i < 5; i++)
            {
                progress?.Report($"‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞... {i + 1}/5");
                await Task.Delay(ms / 5);
            }

            progress?.Report("‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞");
            return ++data;
        }

        // –ï—â–µ –æ–¥–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≥–∏–±–∫–æ—Å—Ç–∏
        static async Task<int> FastTakesAWhileAsync(int data, int ms, IProgress<string>? progress)
        {
            progress?.Report("üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫");

            await Task.Delay(ms / 2);
            progress?.Report($"‚ö° –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {data} -> {data + 2}");

            return data + 2;
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        static async Task ProcessWithProgressAsync(TakesAWhileDelegate asyncDelegate, int data, int ms)
        {
            var progress = new Progress<string>(message =>
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] {message}");
            });

            Console.WriteLine($"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å data={data}, ms={ms}");

            // –í—ã–∑—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–µ–ª–µ–≥–∞—Ç
            Task<int> task = asyncDelegate(data, ms, progress);

            // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            while (!task.IsCompleted)
            {
                Console.Write(". ");
                await Task.Delay(100);
            }

            int result = await task;
            Console.WriteLine($"üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}");
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–µ–ª–µ–≥–∞—Ç–æ–≤
        static async Task ExecuteMultipleDelegatesAsync()
        {
            var progress = new Progress<string>(message =>
            {
                Console.WriteLine($"[MULTI] {message}");
            });

            TakesAWhileDelegate dl1 = TakesAWhileAsync;
            TakesAWhileDelegate dl2 = FastTakesAWhileAsync;

            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            Task<int> task1 = dl1(10, 2000, progress);
            Task<int> task2 = dl2(20, 1000, progress);
            Task<int> task3 = dl1(30, 1500, progress);

            // –ñ–¥–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            var results = await Task.WhenAll(task1, task2, task3);

            Console.WriteLine($"üìä –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {string.Join(", ", results)}");
        }

        public static async Task Main(string[] args)
        {
            const int ms = (int)5e3;
            Console.WriteLine("=== –ê–°–ò–ù–•–†–û–ù–ù–´–ï –î–ï–õ–ï–ì–ê–¢–´ –° PROGRESS ===");

            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–µ–ª–µ–≥–∞—Ç–æ–≤
            TakesAWhileDelegate asyncDelegate = TakesAWhileAsync;
            TakesAWhileDelegate fastDelegate = FastTakesAWhileAsync;
            // –õ—è–º–±–¥–∞-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–ª–µ–≥–∞—Ç–∞
            TakesAWhileDelegate lambdaDelegate = async (data, ms, progress) =>
            {
                progress?.Report($"üé≠ –õ—è–º–±–¥–∞-–¥–µ–ª–µ–≥–∞—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å data={data}");

                int steps = 3;
                for (int i = 0; i < steps; i++)
                {
                    progress?.Report($"üî® –®–∞–≥ {i + 1}/{steps}");
                    await Task.Delay(ms / steps);
                }

                int result = data * 3;
                progress?.Report($"üé≠ –õ—è–º–±–¥–∞-–¥–µ–ª–µ–≥–∞—Ç –∑–∞–≤–µ—Ä—à–∏–ª: {data} * 3 = {result}");
                return result;
            };
            // lambdaDelegate lambdaDelegate = LambdaDelegateExample;

            // 1. –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            Console.WriteLine("\n1. üìç –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:");
            await ProcessWithProgressAsync(asyncDelegate, 5, ms);

            // 2. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –¥–µ–ª–µ–≥–∞—Ç–æ–≤
            Console.WriteLine("\n2. üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –¥–µ–ª–µ–≥–∞—Ç–æ–≤:");
            await ProcessWithProgressAsync(fastDelegate, 8, ms);
            await ProcessWithProgressAsync(lambdaDelegate, 3, ms);

            // 3. –ú—É–ª—å—Ç–∏–∫–∞—Å—Ç–∏–Ω–≥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –¥–µ–ª–µ–≥–∞—Ç–æ–≤
            Console.WriteLine("\n3. üîó –ú—É–ª—å—Ç–∏–∫–∞—Å—Ç–∏–Ω–≥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –¥–µ–ª–µ–≥–∞—Ç–æ–≤:");

            TakesAWhileDelegate multicastDelegate = asyncDelegate;
            multicastDelegate += fastDelegate;
            multicastDelegate += lambdaDelegate;

            // –î–ª—è –º—É–ª—å—Ç–∏–∫–∞—Å—Ç–∏–Ω–≥–∞ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
            var progress = new Progress<string>(message =>
            {
                Console.WriteLine($"[MULTICAST] {message}");
            });

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ –º—É–ª—å—Ç–∏–∫–∞—Å—Ç–∞
            var tasks = multicastDelegate.GetInvocationList();
            var taskResults = new Task<int>[tasks.Length];

            for (int i = 0; i < tasks.Length; i++)
            {
                var currentDelegate = (TakesAWhileDelegate)tasks[i];
                taskResults[i] = currentDelegate(i * 10, ms, progress);
            }

            var multicastResults = await Task.WhenAll(taskResults);
            Console.WriteLine($"üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º—É–ª—å—Ç–∏–∫–∞—Å—Ç–∞: {string.Join(", ", multicastResults)}");

            // 4. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            Console.WriteLine("\n4. ‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:");
            await ExecuteMultipleDelegatesAsync();

            // 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –¥–µ–ª–µ–≥–∞—Ç–∞—Ö
            Console.WriteLine("\n5. üö® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π:");

            TakesAWhileDelegate faultyDelegate = async (data, ms, prog) =>
            {
                prog?.Report("üîß –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –¥–µ–ª–µ–≥–∞—Ç–∞");
                await Task.Delay(500);
                throw new InvalidOperationException("–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!");
            };

            try
            {
                await faultyDelegate(1, 1000, progress);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –ü–æ–π–º–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {ex.Message}");
            }

            // 6. –û—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            Console.WriteLine("\n6. ‚èπÔ∏è  –û—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:");

            using (var cancellationTokenSource = new CancellationTokenSource())
            {
                TakesAWhileDelegate cancellableDelegate = async (data, ms, prog) =>
                {
                    for (int i = 0; i < 10; i++)
                    {
                        cancellationTokenSource.Token.ThrowIfCancellationRequested();
                        prog?.Report($"üîÉ –†–∞–±–æ—Ç–∞ {i + 1}/10");
                        await Task.Delay(ms / 10);
                    }
                    return data + 100;
                };

                // –û—Ç–º–µ–Ω—è–µ–º —á–µ—Ä–µ–∑ 500ms
                cancellationTokenSource.CancelAfter(500);

                try
                {
                    await cancellableDelegate(50, 2000, progress);
                }
                catch (OperationCanceledException)
                {
                    Console.WriteLine("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ");
                }
            }
        }
    }
}